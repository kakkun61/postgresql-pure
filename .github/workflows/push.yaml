name: build

on:
  - push
  - pull_request

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        ghc: ['8.8', '8.10', '9.0']
        exclude:
          - os: macos-latest
            ghc: '8.8'
            # GHC 8.8 is only for OS X x86_64.
          - os: macos-latest
            ghc: '8.10'
            # Incompatible LLVM version.
          - os: macos-latest
            ghc: '9.0'
            # Incompatible LLVM version.

    runs-on: ${{ matrix.os }}

    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4
      - uses: haskell-actions/setup@v2
        id: setup
        with:
          ghc-version: ${{ matrix.ghc }}
      - run: cabal build all --dry-run
        # This generates dist-newstyle/cache/plan.json for the cache key.
      - uses: actions/cache/restore@v4
        id: cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.key }}-
      - run: cabal build all --only-dependencies
        # If we had an exact cache hit, the dependencies will be up to date.
        if: steps.cache.outputs.cache-hit != 'true'
      - uses: actions/cache/save@v4
        # If we had an exact cache hit, trying to save the cache would error because of key clash.
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}
      - run: make build-deps
      - run: make build
